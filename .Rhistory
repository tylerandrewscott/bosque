l1 = list(lcomb_data[[ivars[[1]][1]]])
names(l1) <- ivars[[1]][1]
lcu <- inla.make.lincombs(
'l1' = lcomb_data[[ivars[[1]][1]]],
"l2" = lcomb_data[[ivars[[1]][2]]],
"l3"  = lcomb_data[[ivars[[1]][1]]] * lcomb_data[[ivars[[1]][2]]])
for(n in seq_along(lcu)){
names(lcu[[n]][[1]]) <- ivars[[1]][1]
names(lcu[[n]][[2]]) <- ivars[[1]][2]
names(lcu[[n]][[3]]) <- iname[1]
}
lcy <- inla.make.lincombs(
'l1' = lcomb_data[[ivars[[2]][1]]],
"l2" = lcomb_data[[ivars[[2]][2]]],
"l3"  = lcomb_data[[ivars[[2]][1]]] * lcomb_data[[ivars[[2]][2]]])
for(n in seq_along(lcy)){
names(lcy[[n]][[1]]) <- ivars[[2]][1]
names(lcy[[n]][[2]]) <- ivars[[2]][2]
names(lcy[[n]][[3]]) <- iname[2]
}
names(lcu) = paste('u', 1:length(lcu), sep="")
names(lcy) = paste('y', 1:length(lcy), sep="")
lc = c(lcu, lcy)
u.sdres <- sd(model_list_of_lists[[i]][[j]]$.args$data$u,na.rm = T)#sd(y_like[is.finite(y_lik)])
y.sdres <- sd(model_list_of_lists[[i]][[j]]$.args$data$y/model_list_of_lists[[i]][[j]]$.args$data$u,na.rm=T)
pc.prec.u = list(prec = list(prior = "pc.prec", param = c(3*u.sdres, 0.01)))
pc.prec.y = list(prec = list(prior = "pc.prec", param = c(3*y.sdres, 0.01)))
# famcontrol = list(list(prior = "pcprec", param = c(3*u.sdres,0.01)),
#                  list(prior = "pcprec", param = c(3*y.sdres,0.01)))
newmodel = inla(formula = model_list_of_lists[[i]][[j]]$.args$formula ,control.compute = list(waic=TRUE,dic=TRUE),
c('poisson', 'binomial'),Ntrials = model_list_of_lists[[i]][[j]]$.args$Ntrials,
#control.inla= list(#strategy = "gaussian", int.strategy = "eb"),
#control.family = famcontrol,
control.fixed = list(expand.factor.strategy = "inla"),
data=model_list_of_lists[[i]][[j]]$.args$data,lincomb = lc,
control.update = list(result = model_list_of_lists[[i]][[j]]),
control.predictor=list(compute=TRUE),verbose=F)
lcd = newmodel$summary.lincomb.derived
lcd$id = rownames(lcd)
lcd$group = str_extract(lcd$id,'^[u-y]')
lcd$group = ifelse(lcd$group== 'u','Project count','CE/total NEPA analyses')
lcd$group <- fct_rev(as.factor(lcd$group))
qvals = rbind(lcomb_data[,1:2],lcomb_data[,3:4],use.names = F)
names(qvals) <- c('scale_val1','scale_val2')
lcd$x1_quantile = unlist(replicate(2,rep(x1seq,nrow(lcd)/2/length(x1seq)),simplify = F))
lcd$x2_quantile = unlist(replicate(2,rep(x2seq,each = nrow(lcd)/2/length(x2seq)),simplify = F))
lcd = cbind(lcd,qvals)
axnames = unique(str_remove(names(temp_vars),'^[u-y]_'))
lcd[[axnames[[1]]]]<-lcomb_data[[names(temp_vars)[1]]]
lcd[[axnames[[2]]]]<-lcomb_data[[names(temp_vars)[2]]]
intername = gsub(':','x',str_remove_all(iname[[1]],'u_'))
figname = paste(mod_names[i],intername,sep='_')
lcd = data.table(lcd)
#lcd = lcd[!duplicated(paste(scale_val1,scale_val2,group)),]
lcd$i = i
lcd$j = j
lcd$DV <- mod_names[i]
empty_list = rbind(empty_list,lcd,fill = T,use.names = T)
}
}
}
fwrite(empty_list,'output/policypolitics/interaction_results.csv')
empty_list = fread('output/policypolitics/interaction_results.csv')
#qvals = c('0.05','0.25','0.5','0.75','0.95')
qvals_LCV = c('0.05','0.95')
qval_labels_lcv = c('~0','~95')
qvals_demVS = c('0.05','0.95')
qval_labels_dmVS = c('15%','65%')
qvals_Dem = c(0.05,0.90)
qval_labels_DEM = c('Republican','Democrat')
ext_dt = empty_list[DV=='Extractive',]
ext_dt$sig = ifelse(ext_dt$`0.025quant`<0&ext_dt$`0.975quant`>0,0,1)
ext_dt_lcv = ext_dt[!is.na(LCV_annual)& x2_quantile %in% qvals_LCV,]
ext_dt_dem = ext_dt[!is.na(percentD_H)&x2_quantile %in% qvals_demVS,]
ext_dt_rep = ext_dt[!is.na(democrat)&x2_quantile %in% qvals_Dem,]
ext_dt_dem
empty_list
tdt
lcd
for(i in seq_along(intervars)){
for(j in seq_along(intervars[[i]])){
if(length(intervars[[i]][[j]])>0){
print(j)
tdt = as.data.table(as.matrix(model_list_of_lists[[i]][[j]]$model.matrix))
iname = lapply(intervars[[i]][[j]],function(k)  k)
ivars = lapply(intervars[[i]][[j]],function(k)  c(unlist(str_split(k,':'))))
temp_vars = data.table(tdt[mu.u ==1,ivars[[1]],with = F],
tdt[mu.u ==0,ivars[[2]],with = F])
cols = unlist(ivars)
x1seq = seq(0.05,0.95,0.05)
x2seq = seq(0.05,0.95,0.05)
u_combos = expand.grid(apply(temp_vars[,ivars[[1]][1],with=F],2,quantile,x1seq),
apply(temp_vars[,ivars[[1]][2],with=F],2,quantile,x2seq))
names(u_combos) = ivars[[1]]
y_combos = expand.grid(apply(temp_vars[,ivars[[2]][1],with=F],2,quantile,x1seq),
apply(temp_vars[,ivars[[2]][2],with=F],2,quantile,x2seq))
names(y_combos) = ivars[[2]]
lcomb_data = data.table(u_combos,y_combos)
l1 = list(lcomb_data[[ivars[[1]][1]]])
names(l1) <- ivars[[1]][1]
lcu <- inla.make.lincombs(
'l1' = lcomb_data[[ivars[[1]][1]]],
"l2" = lcomb_data[[ivars[[1]][2]]],
"l3"  = lcomb_data[[ivars[[1]][1]]] * lcomb_data[[ivars[[1]][2]]])
for(n in seq_along(lcu)){
names(lcu[[n]][[1]]) <- ivars[[1]][1]
names(lcu[[n]][[2]]) <- ivars[[1]][2]
names(lcu[[n]][[3]]) <- iname[1]
}
lcy <- inla.make.lincombs(
'l1' = lcomb_data[[ivars[[2]][1]]],
"l2" = lcomb_data[[ivars[[2]][2]]],
"l3"  = lcomb_data[[ivars[[2]][1]]] * lcomb_data[[ivars[[2]][2]]])
for(n in seq_along(lcy)){
names(lcy[[n]][[1]]) <- ivars[[2]][1]
names(lcy[[n]][[2]]) <- ivars[[2]][2]
names(lcy[[n]][[3]]) <- iname[2]
}
names(lcu) = paste('u', 1:length(lcu), sep="")
names(lcy) = paste('y', 1:length(lcy), sep="")
lc = c(lcu, lcy)
u.sdres <- sd(model_list_of_lists[[i]][[j]]$.args$data$u,na.rm = T)#sd(y_like[is.finite(y_lik)])
y.sdres <- sd(model_list_of_lists[[i]][[j]]$.args$data$y/model_list_of_lists[[i]][[j]]$.args$data$u,na.rm=T)
pc.prec.u = list(prec = list(prior = "pc.prec", param = c(3*u.sdres, 0.01)))
pc.prec.y = list(prec = list(prior = "pc.prec", param = c(3*y.sdres, 0.01)))
# famcontrol = list(list(prior = "pcprec", param = c(3*u.sdres,0.01)),
#                  list(prior = "pcprec", param = c(3*y.sdres,0.01)))
newmodel = inla(formula = model_list_of_lists[[i]][[j]]$.args$formula ,control.compute = list(waic=TRUE,dic=TRUE),
c('poisson', 'binomial'),Ntrials = model_list_of_lists[[i]][[j]]$.args$Ntrials,
#control.inla= list(#strategy = "gaussian", int.strategy = "eb"),
#control.family = famcontrol,
control.fixed = list(expand.factor.strategy = "inla"),
data=model_list_of_lists[[i]][[j]]$.args$data,lincomb = lc,
control.update = list(result = model_list_of_lists[[i]][[j]]),
control.predictor=list(compute=TRUE),verbose=F)
lcd = newmodel$summary.lincomb.derived
lcd$id = rownames(lcd)
lcd$group = str_extract(lcd$id,'^[u-y]')
lcd$group = ifelse(lcd$group== 'u','Project count','CE/total NEPA analyses')
lcd$group <- fct_rev(as.factor(lcd$group))
qvals = rbind(lcomb_data[,1:2],lcomb_data[,3:4],use.names = F)
names(qvals) <- c('scale_val1','scale_val2')
lcd$x1_quantile = unlist(replicate(2,rep(x1seq,nrow(lcd)/2/length(x1seq)),simplify = F))
lcd$x2_quantile = unlist(replicate(2,rep(x2seq,each = nrow(lcd)/2/length(x2seq)),simplify = F))
lcd = cbind(lcd,qvals)
axnames = unique(str_remove(names(temp_vars),'^[u-y]_'))
lcd[[axnames[[1]]]]<-lcomb_data[[names(temp_vars)[1]]]
lcd[[axnames[[2]]]]<-lcomb_data[[names(temp_vars)[2]]]
intername = gsub(':','x',str_remove_all(iname[[1]],'u_'))
figname = paste(mod_names[i],intername,sep='_')
lcd = data.table(lcd)
#lcd = lcd[!duplicated(paste(scale_val1,scale_val2,group)),]
lcd$i = i
lcd$j = j
lcd$DV <- mod_names[i]
empty_list = rbind(empty_list,lcd,fill = T,use.names = T)
}
}
}
fwrite(empty_list,'output/policypolitics/interaction_results.csv')
setwd('../bosque/')
scratch_loc = '../../../../net/tmp/tscott1/bosque_scratch/'
starts = list( 'https://dww2.tceq.texas.gov/DWW/JSP/SearchDispatch?number=&name=&ActivityStatusCD=All&county=All&WaterSystemType=C&SourceWaterType=All&SampleType=null&begin_date=2%2F9%2F2017&end_date=2%2F9%2F2019&action=Search+For+Water+Systems',
'https://dww2.tceq.texas.gov/DWW/JSP/SearchDispatch?number=&name=&ActivityStatusCD=All&county=All&WaterSystemType=NC&SourceWaterType=All&SampleType=null&begin_date=2%2F9%2F2017&end_date=2%2F9%2F2019&action=Search+For+Water+Systems',
'https://dww2.tceq.texas.gov/DWW/JSP/SearchDispatch?number=&name=&ActivityStatusCD=All&county=All&WaterSystemType=NTNC&SourceWaterType=All&SampleType=null&begin_date=2%2F9%2F2017&end_date=2%2F9%2F2019&action=Search+For+Water+Systems')
css_owner = "table:nth-child(21) tr+ tr td"
css_cn = "caption+ tbody td"
css_rn = "p+ table tr+ tr td"
css_flow = "table:nth-child(31) td"
css_inter = "table:nth-child(28) td"
library(rvest)
library(tidyverse)
library(pbapply)
quers = sapply(starts,function(x) {
nodes = x[[1]] %>% read_html() %>% html_nodes('a')
sum_nodes = nodes[grep('DataSheet',nodes %>% html_attr('href'))] %>% html_attr('href')
pref = 'https://dww2.tceq.texas.gov/DWW/JSP/'
sum_nodes = gsub('\\s','',sum_nodes)
q = paste0(pref,sum_nodes)
q})
quers = unlist(quers)
owner_list = pblapply(seq_along(quers),function(x) {
print(x)
rm(list = grep('temp',ls(),value=T))
tryCatch({
base_page = quers[x] %>% read_html()
flow_temp = base_page %>% html_nodes(css_flow) %>% html_text(trim=T) %>% matrix(.,nrow=2,byrow = T)
colnames(flow_temp) <- flow_temp[1,]
flow_temp = flow_temp[-1,]
inter_temp = base_page %>% html_nodes(css_inter) %>% html_text(trim=T) #%>% matrix(.,nrow=2,byrow = T)
table_nodes = base_page %>% html_nodes('table')
table_nodes = table_nodes[!sapply(sapply(seq_along(table_nodes),function(t) tryCatch({html_table(table_nodes[[t]],fill=T,trim=T)},error = function(e) NULL)),is.null)]
table_list = html_table(table_nodes,trim=T,fill=T)
inter_temp = table_list[[which(grepl('w/other PWS',table_list,fixed = T ))[2]]][,-5]
colnames(inter_temp) <- inter_temp[1,]
inter_temp = inter_temp[-1,]
if(nrow(inter_temp)>0){pop_temp = inter_temp %>% dplyr::select(-`# ofConnect`,-`# I/Cw/other PWS`) %>% spread(PopulationType,PopulationServed,sep = '_Population_')
sc_temp = inter_temp %>% dplyr::select(-PopulationServed,-`# I/Cw/other PWS`) %>% spread( PopulationType,`# ofConnect`,sep = '_ServiceConnections_')
}else{pop_temp = NA;sc_temp=NA}
interconnects_temp = sum(as.numeric(inter_temp$`# I/Cw/other PWS`))
cn_temp = base_page %>% html_nodes(css_cn) %>% html_text(trim=T) %>% matrix(.,ncol=2,byrow=T) %>% .[-1,] %>% matrix(.,ncol=2) %>% data.frame(.,stringsAsFactors = F) %>% mutate(CN_ID = paste('CN',1:nrow(.),sep='_'))
org_cn_temp = cn_temp %>% dplyr::select(-X2) %>% spread(CN_ID,X1)
colnames(org_cn_temp) = gsub('CN_','CN_ORG_',colnames(org_cn_temp))
id_cn_temp = cn_temp %>% dplyr::select(-X1) %>% spread(CN_ID,X2)
cn_bind_temp = cbind(org_cn_temp,id_cn_temp)
df = data.frame(PWS_ID = str_extract(quers[x],'TX[0-9]{1,}'),
cbind(matrix(base_page %>% html_nodes(css_owner) %>% html_text(trim=T) ,nrow = 1,dimnames = list(x,'Owner_Type')),
matrix(base_page %>% html_nodes(css_rn) %>% html_text(trim=T) ,nrow=1,dimnames = list(x,c('PWS_ID_EX','PWS_NAME','RN'))),
rbind(flow_temp),
cn_bind_temp,
pop_temp,sc_temp),
Interconnections = interconnects_temp,
stringsAsFactors = F)
df})
},cl = 2)
owner_df = do.call(plyr::rbind.fill,owner_list[sapply(owner_list,class)!='try-error'])
owner_df$Total_Storage_Units = str_extract(owner_df$TotalStorage.MG.,'[A-Z]{1,}')
owner_df$Total_Storage_MG = as.numeric(gsub(' [A-Z]{1,}$','',owner_df$TotalStorage.MG.))
owner_df$Total_Storage_MG = ifelse(is.na(owner_df$Total_Storage_MG ),NA,ifelse(owner_df$Total_Storage_Units=='MG',owner_df$Total_Storage_MG ,owner_df$Total_Storage_MG/1000000))
owner_df$Total_Production_Units = str_extract(owner_df$TotalProduct.MGD.,'[A-Z]{1,}')
owner_df$Total_Product_MGD = as.numeric(gsub(' [A-Z]{1,}$','',owner_df$TotalProduct.MGD.))
owner_df$Total_Product_MGD = ifelse(is.na(owner_df$Total_Product_MGD),NA,ifelse(owner_df$Total_Production_Units=='MG',owner_df$Total_Product_MGD,owner_df$Total_Product_MGD/1000000))
owner_df$Avg_Daily_Consumption_Units = str_extract(owner_df$AverageDailyConsump.,'[A-Z]{1,}')
owner_df$Average_Daily_Consump_MGD = as.numeric(gsub(' [A-Z]{1,}$','',owner_df$AverageDailyConsump.))
owner_df$Avg_Daily_Consumption_Units[is.na(owner_df$Average_Daily_Consump_MGD)] <- NA
owner_df$Average_Daily_Consump_MGD[!is.na(owner_df$Average_Daily_Consump_MGD)&owner_df$Avg_Daily_Consumption_Units == 'GPM'] <-
owner_df$Average_Daily_Consump_MGD[!is.na(owner_df$Average_Daily_Consump_MGD)&owner_df$Avg_Daily_Consumption_Units == 'GPM']  * 1440  / 1000000
# extra = lapply(which(sapply(owner_list,class)=='try-error'),function(x){
#   own = tryCatch({quers[x] %>% read_html() %>% html_nodes(css_owner) %>% html_text(trim=T)},error=function(e) NULL)
#   if(!is.null(own)){
#     data.frame(PWS_ID = str_extract(quers[x],'TX[0-9]{1,}'),owner_type = own,stringsAsFactors = F)}})
# owner_df = rbind(owner_df,do.call(rbind,extra))
saveRDS(owner_df,paste0(scratch_loc,paste0('scratch/pws_details_',Sys.Date(),'.RDS')))
scratch_loc = '../../../../net/tmp/tscott1/bosque_scratch/'
starts = list( 'https://dww2.tceq.texas.gov/DWW/JSP/SearchDispatch?number=&name=&ActivityStatusCD=All&county=All&WaterSystemType=C&SourceWaterType=All&SampleType=null&begin_date=2%2F9%2F2017&end_date=2%2F9%2F2019&action=Search+For+Water+Systems',
'https://dww2.tceq.texas.gov/DWW/JSP/SearchDispatch?number=&name=&ActivityStatusCD=All&county=All&WaterSystemType=NC&SourceWaterType=All&SampleType=null&begin_date=2%2F9%2F2017&end_date=2%2F9%2F2019&action=Search+For+Water+Systems',
'https://dww2.tceq.texas.gov/DWW/JSP/SearchDispatch?number=&name=&ActivityStatusCD=All&county=All&WaterSystemType=NTNC&SourceWaterType=All&SampleType=null&begin_date=2%2F9%2F2017&end_date=2%2F9%2F2019&action=Search+For+Water+Systems')
css_owner = "table:nth-child(21) tr+ tr td"
css_cn = "caption+ tbody td"
css_rn = "p+ table tr+ tr td"
css_flow = "table:nth-child(31) td"
css_inter = "table:nth-child(28) td"
library(rvest)
library(tidyverse)
library(pbapply)
quers = sapply(starts,function(x) {
nodes = x[[1]] %>% read_html() %>% html_nodes('a')
sum_nodes = nodes[grep('DataSheet',nodes %>% html_attr('href'))] %>% html_attr('href')
pref = 'https://dww2.tceq.texas.gov/DWW/JSP/'
sum_nodes = gsub('\\s','',sum_nodes)
q = paste0(pref,sum_nodes)
q})
quers = unlist(quers)
owner_list = pblapply(seq_along(quers),function(x) {
print(x)
rm(list = grep('temp',ls(),value=T))
tryCatch({
base_page = quers[x] %>% read_html()
flow_temp = base_page %>% html_nodes(css_flow) %>% html_text(trim=T) %>% matrix(.,nrow=2,byrow = T)
colnames(flow_temp) <- flow_temp[1,]
flow_temp = flow_temp[-1,]
inter_temp = base_page %>% html_nodes(css_inter) %>% html_text(trim=T) #%>% matrix(.,nrow=2,byrow = T)
table_nodes = base_page %>% html_nodes('table')
table_nodes = table_nodes[!sapply(sapply(seq_along(table_nodes),function(t) tryCatch({html_table(table_nodes[[t]],fill=T,trim=T)},error = function(e) NULL)),is.null)]
table_list = html_table(table_nodes,trim=T,fill=T)
inter_temp = table_list[[which(grepl('w/other PWS',table_list,fixed = T ))[2]]][,-5]
colnames(inter_temp) <- inter_temp[1,]
inter_temp = inter_temp[-1,]
if(nrow(inter_temp)>0){pop_temp = inter_temp %>% dplyr::select(-`# ofConnect`,-`# I/Cw/other PWS`) %>% spread(PopulationType,PopulationServed,sep = '_Population_')
sc_temp = inter_temp %>% dplyr::select(-PopulationServed,-`# I/Cw/other PWS`) %>% spread( PopulationType,`# ofConnect`,sep = '_ServiceConnections_')
}else{pop_temp = NA;sc_temp=NA}
interconnects_temp = sum(as.numeric(inter_temp$`# I/Cw/other PWS`))
cn_temp = base_page %>% html_nodes(css_cn) %>% html_text(trim=T) %>% matrix(.,ncol=2,byrow=T) %>% .[-1,] %>% matrix(.,ncol=2) %>% data.frame(.,stringsAsFactors = F) %>% mutate(CN_ID = paste('CN',1:nrow(.),sep='_'))
org_cn_temp = cn_temp %>% dplyr::select(-X2) %>% spread(CN_ID,X1)
colnames(org_cn_temp) = gsub('CN_','CN_ORG_',colnames(org_cn_temp))
id_cn_temp = cn_temp %>% dplyr::select(-X1) %>% spread(CN_ID,X2)
cn_bind_temp = cbind(org_cn_temp,id_cn_temp)
df = data.frame(PWS_ID = str_extract(quers[x],'TX[0-9]{1,}'),
cbind(matrix(base_page %>% html_nodes(css_owner) %>% html_text(trim=T) ,nrow = 1,dimnames = list(x,'Owner_Type')),
matrix(base_page %>% html_nodes(css_rn) %>% html_text(trim=T) ,nrow=1,dimnames = list(x,c('PWS_ID_EX','PWS_NAME','RN'))),
rbind(flow_temp),
cn_bind_temp,
pop_temp,sc_temp),
Interconnections = interconnects_temp,
stringsAsFactors = F)
df})
},cl = 2)
owner_df = do.call(plyr::rbind.fill,owner_list[sapply(owner_list,class)!='try-error'])
owner_df$Total_Storage_Units = str_extract(owner_df$TotalStorage.MG.,'[A-Z]{1,}')
owner_df$Total_Storage_MG = as.numeric(gsub(' [A-Z]{1,}$','',owner_df$TotalStorage.MG.))
owner_df$Total_Storage_MG = ifelse(is.na(owner_df$Total_Storage_MG ),NA,ifelse(owner_df$Total_Storage_Units=='MG',owner_df$Total_Storage_MG ,owner_df$Total_Storage_MG/1000000))
owner_df$Total_Production_Units = str_extract(owner_df$TotalProduct.MGD.,'[A-Z]{1,}')
owner_df$Total_Product_MGD = as.numeric(gsub(' [A-Z]{1,}$','',owner_df$TotalProduct.MGD.))
owner_df$Total_Product_MGD = ifelse(is.na(owner_df$Total_Product_MGD),NA,ifelse(owner_df$Total_Production_Units=='MG',owner_df$Total_Product_MGD,owner_df$Total_Product_MGD/1000000))
owner_df$Avg_Daily_Consumption_Units = str_extract(owner_df$AverageDailyConsump.,'[A-Z]{1,}')
owner_df$Average_Daily_Consump_MGD = as.numeric(gsub(' [A-Z]{1,}$','',owner_df$AverageDailyConsump.))
owner_df$Avg_Daily_Consumption_Units[is.na(owner_df$Average_Daily_Consump_MGD)] <- NA
owner_df$Average_Daily_Consump_MGD[!is.na(owner_df$Average_Daily_Consump_MGD)&owner_df$Avg_Daily_Consumption_Units == 'GPM'] <-
owner_df$Average_Daily_Consump_MGD[!is.na(owner_df$Average_Daily_Consump_MGD)&owner_df$Avg_Daily_Consumption_Units == 'GPM']  * 1440  / 1000000
# extra = lapply(which(sapply(owner_list,class)=='try-error'),function(x){
#   own = tryCatch({quers[x] %>% read_html() %>% html_nodes(css_owner) %>% html_text(trim=T)},error=function(e) NULL)
#   if(!is.null(own)){
#     data.frame(PWS_ID = str_extract(quers[x],'TX[0-9]{1,}'),owner_type = own,stringsAsFactors = F)}})
# owner_df = rbind(owner_df,do.call(rbind,extra))
saveRDS(owner_df,paste0(scratch_loc,paste0('scratch/pws_details_',Sys.Date(),'.RDS')))
scratch_loc
# extra = lapply(which(sapply(owner_list,class)=='try-error'),function(x){
#   own = tryCatch({quers[x] %>% read_html() %>% html_nodes(css_owner) %>% html_text(trim=T)},error=function(e) NULL)
#   if(!is.null(own)){
#     data.frame(PWS_ID = str_extract(quers[x],'TX[0-9]{1,}'),owner_type = own,stringsAsFactors = F)}})
# owner_df = rbind(owner_df,do.call(rbind,extra))
scratch_loc <- 'scratch/'
saveRDS(owner_df,paste0(scratch_loc,paste0('scratch/pws_details_',Sys.Date(),'.RDS')))
saveRDS(owner_df,paste0(paste0('scratch/pws_details_',Sys.Date(),'.RDS')))
# extra = lapply(which(sapply(owner_list,class)=='try-error'),function(x){
#   own = tryCatch({quers[x] %>% read_html() %>% html_nodes(css_owner) %>% html_text(trim=T)},error=function(e) NULL)
#   if(!is.null(own)){
#     data.frame(PWS_ID = str_extract(quers[x],'TX[0-9]{1,}'),owner_type = own,stringsAsFactors = F)}})
# owner_df = rbind(owner_df,do.call(rbind,extra))
list.files()
saveRDS(owner_df,paste0(paste0('scratch/pws_details_',Sys.Date(),'.RDS')))
#$ sudo docker run -d -p 4445:4444 selenium/standalone-firefox:2.53.0
#$ sudo docker ps
library(parallel)
library(rvest)
library(tidyverse)
library(stringr)
library(stringi)
#empty_df = read_csv('test.csv')
library(lubridate)
if(any(list.files('input/tceq_audits/') == 'district_audit_reference_sheet.csv'))
{doc_df = read_csv('input/tceq_audits/district_audit_reference_sheet.csv') %>% mutate(DOC_ID = as.character(DOC_ID),
DISTRICT_ID = as.character(DISTRICT_ID))}
if(!any(list.files('input/tceq_audits/') == 'district_audit_reference_sheet.csv'))
{doc_df = data.frame()}
audit_links = 'https://www14.tceq.texas.gov/iwud/document/index.cfm?fuseaction=ListDocumentsByType&COMMAND=LIST&DocType=Audit-District'
audit_session = rvest::html_session(audit_links)
audit_session
go_on = TRUE
while(go_on)
{go_on = FALSE
css = 'form+ table .iwud'
td = audit_session %>% read_html() %>% html_nodes(css = css)
links = matrix(paste0('https://www14.tceq.texas.gov',td %>% html_nodes("a") %>% html_attr('href')),ncol=2,byrow=T)
text = td %>% html_text(trim=T) %>% matrix(.,ncol=6,byrow=T)
temp_df = data.frame(text,links) %>% rename(DISTRICT_NAME = X1,DISTRICT_ID = X2,DOC_ID = X4,DATE_SUBMITTED = X5,
DISTRICT_URL = X1.1,DOC_URL = X2.1) %>%
dplyr::select(-X6,-X3) %>% mutate(DISTRICT_ID = gsub('[A-Za-z]| ','',DISTRICT_ID))
if(all(temp_df$DOC_ID %in% doc_df$DOC_ID)){break}
temp_df = temp_df %>% filter(!DOC_ID %in% doc_df$DOC_ID)
if(nrow(doc_df)==0){doc_df = temp_df}
if(nrow(doc_df)!=0){doc_df = full_join(doc_df,temp_df)}
if(any((audit_session  %>% read_html() %>% html_nodes('img') %>% html_attr('alt')) == 'Next page'))
{
audit_session <- audit_session %>% follow_link(i =
intersect(which(audit_session  %>% read_html() %>% html_nodes('img') %>% html_attr('alt') == 'Next page'),
which(audit_session  %>% read_html() %>% html_nodes('img') %>% html_attr('name') == 'next')))
go_on = TRUE}}
audit_links = 'https://www14.tceq.texas.gov/iwud/document/index.cfm?fuseaction=ListDocumentsByType&COMMAND=LIST&DocType=Audit'
audit_session = rvest::html_session(audit_links)
go_on = TRUE
while(go_on)
{go_on = FALSE
css = 'form+ table .iwud'
td = audit_session %>% read_html() %>% html_nodes(css = css)
links = matrix(paste0('https://www14.tceq.texas.gov',td %>% html_nodes("a") %>% html_attr('href')),ncol=2,byrow=T)
text = td %>% html_text(trim=T) %>% matrix(.,ncol=6,byrow=T)
temp_df = data.frame(text,links) %>% rename(DISTRICT_NAME = X1,DISTRICT_ID = X2,DOC_ID = X4,DATE_SUBMITTED = X5,
DISTRICT_URL = X1.1,DOC_URL = X2.1) %>%
dplyr::select(-X6,-X3) %>% mutate(DISTRICT_ID = gsub('[A-Za-z]| ','',DISTRICT_ID))
if(all(temp_df$DOC_ID %in% doc_df$DOC_ID)){break}
temp_df = temp_df %>% filter(!DOC_ID %in% doc_df$DOC_ID)
if(nrow(doc_df)==0){doc_df = temp_df}
if(nrow(doc_df)!=0){doc_df = full_join(doc_df,temp_df)}
if(any((audit_session  %>% read_html() %>% html_nodes('img') %>% html_attr('alt')) == 'Next page'))
{
audit_session <- audit_session %>% follow_link(i =
intersect(which(audit_session  %>% read_html() %>% html_nodes('img') %>% html_attr('alt') == 'Next page'),
which(audit_session  %>% read_html() %>% html_nodes('img') %>% html_attr('name') == 'next')))
go_on = TRUE}}
write_csv(doc_df,'input/tceq_audits/district_audit_reference_sheet.csv')
rm(list=ls())
if(any(list.files('input/tceq_audits/') == 'district_audits.csv'))
{audit_df = read_csv('input/tceq_audits/district_audits.csv',trim_ws = T)
for (c in colnames(audit_df))
{audit_df[[c]] <- as.character(audit_df[[c]])}}
if(!any(list.files('input/tceq_audits/') == 'district_audits.csv'))
{audit_df = data.frame()}
library(pbapply)
doc_df = read_csv('input/tceq_audits/district_audit_reference_sheet.csv')
new_audits = doc_df %>% filter(!DOC_ID %in% audit_df$DOC_ID)
if(nrow(new_audits)!=0){
audit_list = pblapply(1:nrow(new_audits),function(i) as.character(new_audits$DOC_URL[i]) %>% read_html() %>% html_nodes(css = 'td.iwud') %>% html_text(trim=T) %>% matrix(.,ncol=2,byrow=T) %>%
as.data.frame(.,stringsAsFactors = FALSE) %>% spread(V1,V2) %>%
mutate(DOC_URL = new_audits$DOC_URL[i],DOC_ID = new_audits$DOC_ID[i],
DISTRICT_ID = new_audits$DISTRICT_ID[i],
DISTRICT_NAME = new_audits$DISTRICT_NAME[i],
DISTRICT_URL = new_audits$DOC_URL[i],DATE_SUBMITTED = new_audits$DATE_SUBMITTED[i]))
new_audit_df <- invisible(Reduce(full_join,audit_list))
for (c in colnames(new_audit_df))
{new_audit_df[[c]] <- as.character(new_audit_df[[c]])}}
if(nrow(new_audits)!=0){
if(nrow(audit_df)==0)
{audit_df = new_audits}
if(nrow(audit_df!=0))
{audit_df = full_join(audit_df,new_audit_df)}
}
write_csv(audit_df,paste('input/tceq_audits/district_audits.csv',sep='_'))
#$ sudo docker run -d -p 4445:4444 selenium/standalone-firefox:2.53.0
#$ sudo docker ps
library(parallel)
library(rvest)
library(tidyverse)
library(stringr)
library(stringi)
#empty_df = read_csv('test.csv')
library(lubridate)
#slackr_setup(config_file = '../proj3/.slackr')
base_site = 'https://dww2.tceq.texas.gov/DWW/JSP/SearchDispatch?number=&name=&ActivityStatusCD=All&county=All&WaterSystemType=C&SourceWaterType=All&SampleType=null&begin_date=4%2F19%2F2015&end_date=4%2F19%2F2017&action=Search+For+Water+Systems'
#length(system_summary_urls)
prefix = 'https://dww2.tceq.texas.gov/DWW/JSP/'
page_links = base_site %>% read_html() %>% html_nodes('a')
data_sheet_urls = page_links[grepl('Summary',page_links %>% html_text(trim=T))] %>% html_attr('href')
temp = do.call(rbind,mclapply(data_sheet_urls,function(x)
{temp_tds =  gsub(' ','',paste0(prefix,x)) %>% read_html() %>% html_nodes('td');
data.frame(System = str_extract(x,'TX[0-9]{7}'),
Position = as.character(temp_tds[!is.na(temp_tds %>% html_attr('width')) & (temp_tds %>% html_attr('width')) == '25%'] %>% html_text(trim=T)),
NAME = as.character(temp_tds[!is.na(temp_tds %>% html_attr('width')) & (temp_tds %>% html_attr('width')) == '35%'] %>% html_text(trim=T)))},
mc.cores=4,mc.cleanup=T))
poc = temp %>% mutate(
Position = stri_replace_all_regex(Position,"\n|\t|\r|&nbsp",""),
NAME = stri_replace_all_regex(NAME,"\n|\t|\r|&nbsp","")) %>%
filter(!is.na(NAME))
write_csv(poc,paste('input/texas_dww/personnel_records',paste0(Sys.Date(),'.csv'),sep='_'))
#slackr(print('dww scrape done'))
#
#
# head(temp)
operator_css_selector = 'table:nth-child(18)'
system_number_css = "#AutoNumber7 td:nth-child(1) a"
library(magrittr)
system_operators_table_list = mclapply(data_sheet_urls,function(x)
gsub(' ','',paste0(prefix,x)) %>% read_html() %>% rvest::html_node(operator_css_selector) %>%
html_table() %>% mutate(System = str_extract(x,'TX[0-9]{7}')),mc.cores=4,mc.cleanup=T)
system_operators_df = do.call(rbind,system_operators_table_list[!sapply(system_operators_table_list,function(x) x$X1[1]=='No Licensing Data for this PWS')])
nosystem_operators_df = do.call(rbind,system_operators_table_list[sapply(system_operators_table_list,function(x) x$X1[1]=='No Licensing Data for this PWS')])
system_operators_df = cbind(system_operators_df[grepl('License',system_operators_df$X1),] %>% select(-X3,-X1) %>% rename(LICENSE_HOLDER = X2),
system_operators_df[!grepl('License',system_operators_df$X1),] %>% select(-System) %>% rename(CLASSIFICATION = X2,LICENSE_NUM = X3))
system_operators_df = full_join(system_operators_df ,nosystem_operators_df %>% rename(LICENSE_HOLDER = X1))
write.csv(system_operators_df,paste('input/texas_dww/licensed_operators',paste0(Sys.Date(),'.csv'),sep='_'))
drought_site = 'https://www.tceq.texas.gov/drinkingwater/trot/droughtw.html'
dtable = drought_site %>% read_html() %>% html_table(fill=T,header=T)
write_csv(dtable[[1]],paste('input/texas_dww/system_water_restrictions',paste0(Sys.Date(),'.csv'),sep='_'))
sapply(system_operators_table_list,class)
data_sheet_urls[710]
gsub(' ','',paste0(prefix,data_sheet_urls[710])) %>% read_html() %>% rvest::html_node(operator_css_selector) %>%
html_table() %>% mutate(System = str_extract(x,'TX[0-9]{7}'))
gsub(' ','',paste0(prefix,data_sheet_urls[710])) %>% read_html() %>% rvest::html_node(operator_css_selector) %>%
html_table() %>% mutate(System = str_extract(data_sheet_urls[710],'TX[0-9]{7}'))
system_operators_table_list = mclapply(data_sheet_urls,function(x)
gsub(' ','',paste0(prefix,x)) %>% read_html() %>% rvest::html_node(operator_css_selector) %>%
html_table() %>% mutate(System = str_extract(x,'TX[0-9]{7}')),mc.cores=2,mc.cleanup=T)
system_operators_df = do.call(rbind,system_operators_table_list[!sapply(system_operators_table_list,function(x) x$X1[1]=='No Licensing Data for this PWS')])
nosystem_operators_df = do.call(rbind,system_operators_table_list[sapply(system_operators_table_list,function(x) x$X1[1]=='No Licensing Data for this PWS')])
system_operators_df = cbind(system_operators_df[grepl('License',system_operators_df$X1),] %>% select(-X3,-X1) %>% rename(LICENSE_HOLDER = X2),
system_operators_df[!grepl('License',system_operators_df$X1),] %>% select(-System) %>% rename(CLASSIFICATION = X2,LICENSE_NUM = X3))
system_operators_df = full_join(system_operators_df ,nosystem_operators_df %>% rename(LICENSE_HOLDER = X1))
write.csv(system_operators_df,paste('input/texas_dww/licensed_operators',paste0(Sys.Date(),'.csv'),sep='_'))
#$ sudo docker run -d -p 4445:4444 selenium/standalone-firefox:2.53.0
#$ sudo docker ps
library(parallel)
library(rvest)
library(tidyverse)
library(stringr)
library(stringi)
#empty_df = read_csv('test.csv')
library(slackr)
library(lubridate)
library(magrittr)
#slackr_setup(config_file = '../proj3/.slackr')
base_site = 'https://dww2.tceq.texas.gov/DWW/JSP/SearchDispatch?number=&name=&ActivityStatusCD=All&county=All&WaterSystemType=C&SourceWaterType=All&SampleType=null&begin_date=4%2F19%2F2015&end_date=4%2F19%2F2017&action=Search+For+Water+Systems'
#length(system_summary_urls)
prefix = 'https://dww2.tceq.texas.gov/DWW/JSP/'
page_links = base_site %>% read_html() %>% html_nodes('a')
data_sheet_urls = page_links[grepl('Summary',page_links %>% html_text(trim=T))] %>% html_attr('href')
facility_sheet_urls = gsub(' ','',gsub('DataSheet','WaterSystemFacilities',data_sheet_urls))
facility_table_css = 'table:nth-child(9) td , table:nth-child(9) tr+ tr th'
facility_connections_css = 'table:nth-child(12) td , table:nth-child(12) tr+ tr th'
library(data.table)
facility_lists = mclapply(facility_sheet_urls,function(x) {
url = gsub(' ','',paste0(prefix,x))
ht = url %>% read_html()
gmaps = ht %>% html_nodes('a:contains(Google)') %>% html_attr('href')
facilities = ht %>% html_nodes('table') %>% .[[5]] %>% html_table(trim=T,fill=T)
colnames(facilities) <- gsub('\\r|\\t|\\n','',facilities[1,])
facilities = facilities[-1,]
facilities = data.table::data.table(apply(facilities,2,function(x) gsub('\\r|\\t|\\n','',x)))
facilities$PWS_ID = str_extract(x,'TX[0-9]{7}')
facility_connections = ht %>% html_nodes('table') %>% .[[6]] %>% html_table(trim=T,fill=T)
colnames(facility_connections) <- gsub('\\r|\\t|\\n','',facility_connections[1,])
facility_connections = facility_connections[-1,]
facility_connections = data.table::data.table(apply(facility_connections,2,function(x) gsub('\\r|\\t|\\n','',x)))
facility_connections$PWS_ID = str_extract(x,'TX[0-9]{7}')
facilities$Google_Maps[grepl('GoogleMaps',facilities$AerialView)] <- gmaps
list(facilities,facility_connections)
},mc.cores = 4,mc.cleanup = T,mc.preschedule = T)
faclist = lapply(facility_lists,function(x) x[[1]])
conlist = lapply(facility_lists,function(x) x[[2]])
facility_dt = rbindlist(faclist,fill = T)
facility_connection_dt = rbindlist(conlist,fill = T)
write_csv(facility_dt,paste('input/texas_dww/system_facilities',paste0(Sys.Date(),'.csv'),sep='_'))
write_csv(facility_connection_dt,paste('input/texas_dww/system_facility_connections',paste0(Sys.Date(),'.csv'),sep='_'))
