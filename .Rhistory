coefsB$total_coef <- paste0(coefsB$mean,' (',coefsB$`0.025quant`,",",coefsB$`0.975quant`,")")
coefsB$total_coef<-paste0(coefsB$total_coef,ifelse(coefsB$`0.025quant`<0&coefsB$`0.975quant`>0,"","*"))
coefsB<-data.table(coefsB)
tab_order<-c("(Intercept)" ,
"violator, t-1",
"# PWS in CBSA" ,
"HHI for CBSA" ,
"# weather events, t" ,
"Weekly drought avg., t",
"ln(median home value)",
"% bachelor's degree",
"ln(service connections)" ,
'Wholesaler','Primary groundwater',
"median structure age" ,
"ln(debt/connection),t-1",
"ln(revenue/connection),t-1" ,
"ln(fund balance),t-1")
big_tabB <- dcast(coefsB,Coef~Noncompliance,value.var = 'total_coef')
big_tabB <- big_tabB[match(tab_order,big_tabB$Coef),]
big_tabB <- rbind(big_tabB,
data.table(cbind(c('LL','DIC','WAIC'),
do.call(rbind,list(round(rbind(cbind(mB$mlik[1]),
cbind(mB$dic$dic),
cbind(mB$waic$waic)),2))))),
use.names = F)
htmlTable(big_tabB,rnames = F,file = 'org_performance/output/table_allviols.html',
n.cgroup = c(1,1),
cgroup = c("",'Violation occurence'),
#  header = c("","health regulations","management regulations"),
n.rgroup = c(1,1,2,4,7,3),
rgroup = c('','Prior performance',
'Complexity: competition and density',
'Control variables: context',
'Control variables: water district',
'Model fit statistics')
tfoot = "*95% credible interval does not include 0
htmlTable(big_tabB,rnames = F,file = 'org_performance/output/table_allviols.html',
n.cgroup = c(1,1),
cgroup = c("",'Violation occurence'),
#  header = c("","health regulations","management regulations"),
n.rgroup = c(1,1,2,4,7,3),
rgroup = c('','Prior performance',
'Complexity: competition and density',
'Control variables: context',
'Control variables: water district',
'Model fit statistics'),
tfoot = "*95% credible interval does not include 0
^all continuous predictors are mean-centered and scaled
^^LL = log-likelihood; DIC = deviance information criterion; WAIC = Watanabeâ€“Akaike information criterion",
)
big_tabB
summary(mB)
packs = c('tidyverse','lme4','data.table')
need = packs[!packs %in% installed.packages()[,'Package']]
sapply(need,install.packages)
sapply(packs,require,character.only = T)
if(!require(INLA)){
install.packages("INLA",repos=c(getOption("repos"),INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE);
require(INLA)}
temp = readRDS('org_performance/input/df_for_model_V2.RDS')
temp$health_days <- floor((temp$health_prop * 365))
temp$management_days <- floor(temp$nonhealth_prop * 365)
temp$health_days_L1 <- floor((temp$health_prop_L1 * 365))
temp$management_days_L1 <- floor(temp$nonhealth_prop_L1 * 365)
temp$health_days_L1[is.na(temp$health_days_L1)]<-0
temp$management_days_L1[is.na(temp$management_days_L1)]<-0
temp$health_violations_L1[is.na(temp$health_violations_L1)]<-0
temp$management_violations_L1[is.na(temp$management_violations_L1)]<-0
temp$DROP_FROM_FULL_MODEL <- temp$DROP_FROM_FULL_MODEL
temp$DROP_FROM_FULL_MODEL <- temp$DROP_FROM_FULL_MODEL|temp$MASTER_ID %in% temp[,.N,by=.(MASTER_ID)][N<4,]$MASTER_ID
temp$DROP_YEAR_FROM_MODEL <- temp$DROP_FROM_FULL_MODEL | (temp$YEAR<2009|temp$YEAR>2021)
unique(temp$MASTER_ID[!temp$DROP_FROM_FULL_MODEL])
table(temp$YEAR[!temp$DROP_FROM_FULL_MODEL])
#temp$Prop_Nonwholesale[is.na(temp$Prop_Nonwholesale)]<-1
fill_forward_only <- c('REV_PER_CONNECTION_L1','Fund_Balance_L1','TotalDebtServiceOutstanding_L1_Per_Connection')
fill_forward_and_back <- c('SERVICE_CONNECTIONS_COUNT','Median_Home_Value','Prop_Bach','Median_Year_Structure_Built','CBSA_HHI')
temp<-temp[order(MASTER_ID,YEAR),]
temp[,(c(fill_forward_only,fill_forward_and_back)):=lapply(.SD,zoo::na.locf,na.rm = F),by=.(District_ID),.SDcols = c(fill_forward_only,fill_forward_and_back)]
temp[,(fill_forward_and_back):=lapply(.SD,zoo::na.locf,na.rm = F,fromLast = T),by=.(District_ID),.SDcols = fill_forward_and_back]
replace_homes<-temp[,median(Median_Home_Value,na.rm = T),by=.(YEAR)]
temp$Median_Home_Value[is.na(temp$Median_Home_Value)]<-replace_homes$V1[match(temp$YEAR[is.na(temp$Median_Home_Value)],replace_homes$YEAR)]
replace_bach<-temp[,median(Prop_Bach,na.rm = T),by=.(YEAR)]
temp$Prop_Bach[is.na(temp$Prop_Bach)]<-replace_bach$V1[match(temp$YEAR[is.na(temp$Prop_Bach)],replace_bach$YEAR)]
replace_structure<-temp[,median(Median_Year_Structure_Built,na.rm = T),by=.(YEAR)]
temp$Median_Year_Structure_Built[temp$Median_Year_Structure_Built<1900]<-NA
temp$Median_Year_Structure_Built[is.na(temp$Median_Year_Structure_Built)]<-replace_structure$V1[match(temp$YEAR[is.na(temp$Median_Year_Structure_Built)],replace_structure$YEAR)]
temp$Median_Year_Structure_Built[temp$Median_Year_Structure_Built<100]<NA
temp$Median_Structure_Age <- year(Sys.Date()) - temp$Median_Year_Structure_Built
temp$ln_SERVICE_CONNECTIONS_COUNT <- log(temp$SERVICE_CONNECTIONS_COUNT)
temp$ln_REV_PER_CONNECTION_L1 <- log(temp$REV_PER_CONNECTION_L1+1)
temp$ln_FUND_BALANCE_L1 <- log(temp$Fund_Balance_L1+1)
temp$ln_DEBT_OUTSTANDING_PER_CONNECTION_L1 <- log(temp$TotalDebtServiceOutstanding_L1_Per_Connection+1)
temp$ln_MEDIAN_HOME_VALUE <- log(temp$Median_Home_Value)
temp$District_Age <- temp$YEAR-decimal_date(mdy(temp$District_Created))
temp$management_violator <- (temp$management_violations>0) + 0
temp$health_violator <- (temp$health_violations>0) + 0
temp$management_violator_L1 <- (temp$management_violations_L1>0) + 0
temp$health_violator_L1 <- (temp$health_violations_L1>0) + 0
#betaConvert <- function(x){{x * (length(x)-1) + mean(x)}/length(x)}
#temp[,(paste0(repls,'_beta')):=lapply(.SD,betaConvert),.SDcols = repls]
vars_to_std= c("ln_REV_PER_CONNECTION_L1","Prop_Bach",
"ln_FUND_BALANCE_L1","health_violations_L1", "management_violations_L1",'NUM_PWS_CBSA',
"ln_DEBT_OUTSTANDING_PER_CONNECTION_L1",  "Severe_Weather_Events" ,"DSCI_1yr_Weekly_Avg" ,
"ln_SERVICE_CONNECTIONS_COUNT" ,"Median_Structure_Age",
"ln_MEDIAN_HOME_VALUE", "CBSA_HHI")
std_var_names = paste('std',vars_to_std,sep='_')
temp[, (std_var_names) := lapply(.SD,scale), .SDcols=vars_to_std]
fact_vars <- c('Groundwater','Wholesaler')
bin_var_names <- paste0('bin_',fact_vars)
temp[, (bin_var_names) := lapply(.SD,function(x) x), .SDcols=fact_vars]
replace_summary_df <- data.frame(old = c("health_violator","management_violator","health_violator_L1","management_violator_L1","ln_REV_PER_CONNECTION_L1","ln_FUND_BALANCE_L1","ln_DEBT_OUTSTANDING_PER_CONNECTION_L1",
"Prop_Bach","Median_Structure_Age","ln_MEDIAN_HOME_VALUE",
"NUM_PWS_CBSA","CBSA_HHI","ln_SERVICE_CONNECTIONS_COUNT","bin_Groundwater","bin_Wholesaler",
"Severe_Weather_Events","DSCI_1yr_Weekly_Avg"),
new = c("health violator, t","management violator, t",
'health violator, t-1',
'management violator, t-1',
'ln(revenue/connection),t-1','ln(fund balance),t-1','ln(debt/connection),t-1',
"% bachelor's degree","median structure age",'ln(median home value)',
'# PWS in CBSA','HHI for CBSA','ln(service connections)','Primary groundwater','Wholesaler',
'# weather events, t','Weekly drought avg., t'))
sum_order<-c(
"health violator, t",
"management violator, t",
"health violator, t-1",
"management violator, t-1",
"# PWS in CBSA" ,
"HHI for CBSA" ,
"# weather events, t" ,
"Weekly drought avg., t",
"ln(median home value)",
"% bachelor's degree",
"ln(service connections)" ,
"Wholesaler",
"median structure age" ,
"ln(debt/connection),t-1",
"ln(revenue/connection),t-1" ,
"ln(fund balance),t-1",
"Primary groundwater" )
tab_temp <- temp[!temp$DROP_FROM_FULL_MODEL,][,c(replace_summary_df$old,'District_ID','YEAR'),with = F]
tab_temp$bin_Groundwater<-as.factor(ifelse(tab_temp$bin_Groundwater==1,'yes','no'))
tab_temp$bin_Wholesaler<-as.factor(ifelse(tab_temp$bin_Wholesaler==1,'yes','no'))
library(gt)
library(labelled)
names(tab_temp) <- replace_summary_df$new[match(names(tab_temp),replace_summary_df$old)]
facts <- c('Wholesaler','Primary groundwater')
tab_temp <- cbind(tab_temp %>% select(-contains('ln(')),
tab_temp %>% select(contains('ln(')) %>% mutate_all(exp))
tab_temp2 <- tab_temp[,sum_order,with = F]
library(vtable)
names(tab_temp2)<-str_remove_all(names(tab_temp2),'ln\\(|\\)')
sumtable(tab_temp2 ,file = 'org_performance/output/table1.html',
summ = c('mean(x)','median(x)','sd(x)','min(x)','max(x)'))
#
# #tab_temp$home_value_quartile <- ntile(tab_temp$`ln(median home value)`,4)
# vmins2 <- readRDS('org_performance/output/individual_violation_durations.RDS')
# id_crosswalk <- readRDS('org_performance/output/id_crosswalk.RDS')
# vmins2$District_ID <- id_crosswalk$District_ID[match(vmins2$PWSID,id_crosswalk$PWS_ID)]
# vmins2 <- vmins2[!is.na(District_ID),]
# vmins2 <- vmins2[YEAR %in% 2007:2022.]
# vmins2$median_home_value <- tab_temp$`ln(median home value)`[match(paste(vmins2$District_ID,vmins2$YEAR),paste(tab_temp$District_ID,tab_temp$YEAR))]
# tab_temp$home_quartile <- ntile(tab_temp$`ln(median home value)`,2)
# vls <- quantile(tab_temp$`ln(median home value)`,c(0,0.5,1))
# vmins2$home_quartile <- cut(vmins2$median_home_value,breaks = vls,labels = c(1:2),include.lowest = F)
#
# vvals <- vmins2[!is.na(home_quartile),list(.N,mean(end-start)),by = .(IS_HEALTH_BASED_IND,home_quartile)]
# setnames(vvals,c('N','V2'),c('# unique violations','Avg. duration of non-compliance'))
# vvals2 <- dcast(vvals,home_quartile ~ IS_HEALTH_BASED_IND,value.var = c('# unique violations','Avg. duration of non-compliance'))
# num_by_quart <- tab_temp[,.N,by=.(home_quartile)][order(home_quartile),]
# vvals2$num_system_year_obs <- num_by_quart$N[match(vvals2$home_quartile,num_by_quart$home_quartile)]
#panel_structure <- "as.factor(District_ID) + as.factor(YEAR) + as.factor(CBSA_CFIPS)"
#panel_structure_alt <- "f(District_ID,model = 'iid') + f(YEAR,model = 'iid') + f(CBSA_FIPS,model = 'iid')"
mod_temp <- temp[,grep('^std|^bin|violator|^YEAR$|^MASTER_ID$|DROP',names(temp),value = T),with = F]
#mod_temp$MASTER_ID<-paste0('ID',mod_temp$MASTER_ID)
#mod_temp$YEAR <- paste0('Y',mod_temp$YEAR)
mod_temp$YEAR_ID <- as.numeric(as.factor(mod_temp$YEAR))
mod_temp$MASTER_GROUP_NUM <- as.numeric(as.factor(mod_temp$MASTER_ID))
mod_temp$violator <- (mod_temp$health_violator==1|mod_temp$management_violator==1)+0
mod_temp$violator_L1 <- (mod_temp$health_violator_L1==1|mod_temp$management_violator_L1==1)+0
u = 1
f1 <- management_violator ~ f(YEAR_ID,model = 'iid') + f(MASTER_GROUP_NUM,model = 'iid')
f2 <- health_violator ~ f(YEAR_ID,model = 'iid') + f(MASTER_GROUP_NUM,model = 'iid')
f3 <- management_violator ~ f(YEAR_ID,model = 'iid') + f(MASTER_GROUP_NUM,model = 'iid') +
std_ln_REV_PER_CONNECTION_L1 +
std_ln_FUND_BALANCE_L1 +
std_ln_DEBT_OUTSTANDING_PER_CONNECTION_L1 +
std_Prop_Bach + std_Median_Structure_Age + std_ln_MEDIAN_HOME_VALUE +
std_NUM_PWS_CBSA + std_CBSA_HHI +
std_ln_SERVICE_CONNECTIONS_COUNT + bin_Groundwater + bin_Wholesaler +
std_Severe_Weather_Events +  std_DSCI_1yr_Weekly_Avg +
management_violator_L1
f4 <- health_violator ~ f(YEAR_ID,model = 'iid') + f(MASTER_GROUP_NUM,model = 'iid') +
std_ln_REV_PER_CONNECTION_L1 +
std_ln_FUND_BALANCE_L1 +
std_ln_DEBT_OUTSTANDING_PER_CONNECTION_L1 +
std_Prop_Bach + std_Median_Structure_Age + std_ln_MEDIAN_HOME_VALUE +
std_NUM_PWS_CBSA + std_CBSA_HHI +
std_ln_SERVICE_CONNECTIONS_COUNT + bin_Groundwater + bin_Wholesaler +
std_Severe_Weather_Events +  std_DSCI_1yr_Weekly_Avg +
health_violator_L1
fB <- violator ~ f(YEAR_ID,model = 'iid') + f(MASTER_GROUP_NUM,model = 'iid') +
std_ln_REV_PER_CONNECTION_L1 +
std_ln_FUND_BALANCE_L1 +
std_ln_DEBT_OUTSTANDING_PER_CONNECTION_L1 +
std_Prop_Bach + std_Median_Structure_Age + std_ln_MEDIAN_HOME_VALUE +
std_NUM_PWS_CBSA + std_CBSA_HHI +
std_ln_SERVICE_CONNECTIONS_COUNT + bin_Groundwater + bin_Wholesaler +
std_Severe_Weather_Events +  std_DSCI_1yr_Weekly_Avg +
violator_L1
m1_pre <- inla(f1,family = "binomial", Ntrials = 1,data = mod_temp,verbose = T)
m2_pre <- inla(f2,family = "binomial", Ntrials = 1,data = mod_temp,verbose = T)
mB_pre <- inla(violator ~ f(YEAR_ID,model = 'iid') + f(MASTER_GROUP_NUM,model = 'iid'),
family = "binomial", Ntrials = 1,data = mod_temp,verbose = T)
dim(mod_temp[!(mod_temp$DROP_FROM_FULL_MODEL|mod_temp$DROP_FROM_PANEL|mod_temp$DROP_YEAR_FROM_MODEL),])
m1 <- inla(f1,family = "binomial", control.compute = list(waic = T,dic = T,mlik = T),
control.mode = list(theta = m1_pre$mode$theta) ,
Ntrials = 1,data = mod_temp[!mod_temp$DROP_FROM_FULL_MODEL,],verbose = T)
m2 <- inla(f2,family = "binomial", control.compute = list(waic = T,dic = T,mlik = T),
control.mode = list(theta = m2_pre$mode$theta) ,
Ntrials = 1,data = mod_temp[!mod_temp$DROP_FROM_FULL_MODEL,],verbose = T)
m3 <- inla(f3,family = "binomial", control.compute = list(waic = T,dic = T,mlik = T),
control.mode = list(theta = m1_pre$mode$theta) ,
Ntrials = 1,data = mod_temp[!mod_temp$DROP_FROM_FULL_MODEL,],verbose = T)
m4 <- inla(f4,family = "binomial",control.compute = list(waic = T,dic = T,mlik = T),
control.mode = list(theta = m2_pre$mode$theta) ,
Ntrials = 1,data = mod_temp[!mod_temp$DROP_FROM_FULL_MODEL,],verbose = T)
mB <- inla(fB,family = "binomial",control.compute = list(waic = T,dic = T,mlik = T),
control.mode = list(theta = mB_pre$mode$theta) ,
Ntrials = 1,data = mod_temp[!mod_temp$DROP_FROM_FULL_MODEL,],verbose = T)
coefsB <- mB$summary.fixed[,c(1,3,5)] %>%
mutate(Coef = rownames(.),Noncompliance = 'All') %>%
filter(!grepl('factor',Coef))
coefs<-rbind(
m3$summary.fixed[,c(1,3,5)] %>% mutate(Coef = rownames(.),Noncompliance = 'Management') %>% filter(!grepl('factor',Coef)),
m4$summary.fixed[,c(1,3,5)] %>% mutate(Coef = rownames(.),Noncompliance = 'Health') %>% filter(!grepl('factor',Coef))
)
library(forcats)
replace_df <- data.frame(old = c("std_ln_REV_PER_CONNECTION_L1","std_ln_FUND_BALANCE_L1","std_ln_DEBT_OUTSTANDING_PER_CONNECTION_L1",
"std_Prop_Bach","std_Median_Structure_Age","std_ln_MEDIAN_HOME_VALUE",
"std_NUM_PWS_CBSA","std_CBSA_HHI","std_ln_SERVICE_CONNECTIONS_COUNT","bin_Groundwater","bin_Wholesaler",
"std_Severe_Weather_Events","std_DSCI_1yr_Weekly_Avg","health_violator_L1","management_violator_L1",
'violator_L1'),
new = c('ln(revenue/connection),t-1','ln(fund balance),t-1','ln(debt/connection),t-1',
"% bachelor's degree","median structure age",'ln(median home value)',
'# PWS in CBSA','HHI for CBSA','ln(service connections)','Primary groundwater','Wholesaler',
'# weather events, t','Weekly drought avg., t','health violator, t-1',
'management violator, t-1','violator, t-1'))
coefs$Coef[coefs$Coef %in% replace_df$old]<-replace_df$new[match(coefs$Coef[coefs$Coef %in% replace_df$old],replace_df$old)]
coefsB$Coef[coefsB$Coef %in% replace_df$old]<-replace_df$new[match(coefsB$Coef[coefsB$Coef %in% replace_df$old],replace_df$old)]
library(htmlTable)
rownames(coefs)<-1:nrow(coefs)
coefs$mean<-round(coefs$mean,3)
coefs$`0.025quant`<-round(coefs$`0.025quant`,3)
coefs$`0.975quant`<-round(coefs$`0.975quant`,3)
coefs$total_coef <- paste0(coefs$mean,' (',coefs$`0.025quant`,",",coefs$`0.975quant`,")")
coefs$total_coef<-paste0(coefs$total_coef,ifelse(coefs$`0.025quant`<0&coefs$`0.975quant`>0,"","*"))
coefs<-data.table(coefs)
tab_order<-c("(Intercept)" ,
"health violator, t-1",
"management violator, t-1",
"# PWS in CBSA" ,
"HHI for CBSA" ,
"# weather events, t" ,
"Weekly drought avg., t",
"ln(median home value)",
"% bachelor's degree",
"ln(service connections)" ,
'Wholesaler','Primary groundwater',
"median structure age" ,
"ln(debt/connection),t-1",
"ln(revenue/connection),t-1" ,
"ln(fund balance),t-1")
big_tab <- dcast(coefs,Coef~Noncompliance,value.var = 'total_coef')
big_tab <- big_tab[match(tab_order,big_tab$Coef),]
big_tab <- rbind(big_tab,
data.table(cbind(c('LL','DIC','WAIC'),
do.call(rbind,list(round(rbind(cbind(m3$mlik[1],m4$mlik[2]),
cbind(m3$dic$dic,m4$dic$dic),
cbind(m3$waic$waic,m4$waic$waic)),2))))),
use.names = F)
htmlTable(big_tab,rnames = F,file = 'org_performance/output/table2.html',
n.cgroup = c(1,2),
cgroup = c("",'Violation occurence'),
#  header = c("","health regulations","management regulations"),
n.rgroup = c(1,2,2,4,7,3),
tfoot = "*95% credible interval does not include 0
^all continuous predictors are mean-centered and scaled
^^LL = log-likelihood; DIC = deviance information criterion; WAIC = Watanabeâ€“Akaike information criterion",
rgroup = c('','Prior performance',
'Complexity: competition and density',
'Control variables: context',
'Control variables: water district',
'Model fit statistics')
)
library(htmlTable)
rownames(coefsB)<-1:nrow(coefsB)
coefsB$mean<-round(coefsB$mean,3)
coefsB$`0.025quant`<-round(coefsB$`0.025quant`,3)
coefsB$`0.975quant`<-round(coefsB$`0.975quant`,3)
coefsB$total_coef <- paste0(coefsB$mean,' (',coefsB$`0.025quant`,",",coefsB$`0.975quant`,")")
coefsB$total_coef<-paste0(coefsB$total_coef,ifelse(coefsB$`0.025quant`<0&coefsB$`0.975quant`>0,"","*"))
coefsB<-data.table(coefsB)
tab_order<-c("(Intercept)" ,
"violator, t-1",
"# PWS in CBSA" ,
"HHI for CBSA" ,
"# weather events, t" ,
"Weekly drought avg., t",
"ln(median home value)",
"% bachelor's degree",
"ln(service connections)" ,
'Wholesaler','Primary groundwater',
"median structure age" ,
"ln(debt/connection),t-1",
"ln(revenue/connection),t-1" ,
"ln(fund balance),t-1")
big_tabB <- dcast(coefsB,Coef~Noncompliance,value.var = 'total_coef')
big_tabB <- big_tabB[match(tab_order,big_tabB$Coef),]
summary(mB)
big_tabB <- rbind(big_tabB,
data.table(cbind(c('LL','DIC','WAIC'),
do.call(rbind,list(round(rbind(cbind(mB$mlik[1]),
cbind(mB$dic$dic),
cbind(mB$waic$waic)),2))))),
use.names = F)
htmlTable(big_tabB,rnames = F,file = 'org_performance/output/table_allviols.html',
n.cgroup = c(1,1),
cgroup = c("",'Violation occurence'),
#  header = c("","health regulations","management regulations"),
n.rgroup = c(1,1,2,4,7,3),
rgroup = c('','Prior performance',
'Complexity: competition and density',
'Control variables: context',
'Control variables: water district',
'Model fit statistics'),
tfoot = "*95% credible interval does not include 0
^all continuous predictors are mean-centered and scaled
^^LL = log-likelihood; DIC = deviance information criterion; WAIC = Watanabeâ€“Akaike information criterion",
)
big_tabB
coefs2 <- coefs
coefs2$Coef <- fct_relevel(coefs2$Coef,tab_order)
coefs2$Coef <- fct_rev(coefs2$Coef)
coefs2$SIG <- ifelse(coefs2$`0.025quant`<0&coefs2$`0.975quant`>0,0,1)
library(forcats)
ggplot(coefs2[!grepl("Intercept",Coef),]) +
geom_errorbarh(aes(xmin = `0.025quant`,xmax = `0.975quant`,y = Coef,col=Noncompliance)) +
geom_point(aes(x = mean,y = Coef,fill = as.factor(SIG),col = Noncompliance,alpha = SIG)) +
theme_bw() +
scale_fill_manual(values = c('white','black'))+
scale_colour_colorblind(name = 'Violation type') +
theme(legend.position = c(0.8,0.2))
mod_temp$MASTER_ID
unique(mod_temp$MASTER_ID)
length(unique(mod_temp$MASTER_ID))
dinfo_dt = fread('input/twdd_records/district_list_2019-03-08.csv',stringsAsFactors = F,na.strings = "")
match(mod_temp$MASTER_ID,dinfo_dt$District_ID)
dinfo_dt$Type[match(mod_temp$MASTER_ID,dinfo_dt$District_ID)]
table(dinfo_dt$Type[match(dinfo_dt$Type %in% mod_temp$MASTER_ID)]
table(dinfo_dt$Type[dinfo_dt$Type %in% mod_temp$MASTER_ID])
table(dinfo_dt$Type[dinfo_dt$Type %in% mod_temp$MASTER_ID])
table(dinfo_dt$Type[dinfo_dt$District_ID %in% mod_temp$MASTER_ID])
length(unique(mod_temp$MASTER_ID))
length(dinfo_dt$Type[dinfo_dt$District_ID %in% mod_temp$MASTER_ID])
table(dinfo_dt$Type[dinfo_dt$District_ID %in% mod_temp$MASTER_ID & !duplicated(dinfo_dt$District_ID)])
summary(m3)
#system_grid[duplicated(paste(system_grid$MASTER_ID,system_grid$YEAR)),]
#### pws_dt still has non-districts in it, so make sure to filter those out
fig2 <- ggplot(vmins2[!grepl("TX",MASTER_ID)&YEAR>=2000,] %>%
mutate(IS_HEALTH_BASED_IND = ifelse(IS_HEALTH_BASED_IND=='N','Management violations','Health violations')),aes(x = as.factor(YEAR))) +
facet_wrap(~IS_HEALTH_BASED_IND,scales = 'fixed') + geom_bar(aes(fill = YEAR %in% 2009:2021)) + theme_bw() +
scale_y_continuous(name = '# new violations') +
scale_x_discrete(name = 'Reporting year',
breaks = seq(2001,2021,5)) +
scale_fill_manual(name = 'test',values = c('grey70','grey20'),
labels = c('autoregressive model only',
'autoregressive + district context models'))+
ggtitle('Total water district health and management violations') +
theme(text = element_text(family ='Times'),
legend.position = c(0.25,0.6),
legend.background = element_rect(fill = alpha('white',0.5)),
legend.title = element_blank())
###
packs = c('rgeos','rgdal','sp','maptools','readxl','hhi','spdep','lubridate','stringr','neatRanges',
'rvest','R.utils','pbapply','jsonlite','tidyverse','data.table','sf','tigris','lwgeom','tidyquant','readr')
need = packs[!packs %in% installed.packages()[,'Package']]
if(!identical(need,character(0))){sapply(need,install.packages)}
sapply(packs,require,character.only = T)
#if(!require(lucr)){remotes::install_github('Ironholds/lucr');require(lucr)}
year_spread <- c(2000,2022)
if(!file.exists('input/SDWA_latest_downloads/SDWA_VIOLATIONS_ENFORCEMENT.csv')){
zfile <- 'SDWA_latest_downloads.zip'
download.file('https://echo.epa.gov/files/echodownloads/SDWA_latest_downloads.zip',destfile = 'input/SDWA_latest_downloads.zip')
unzip(zfile)
}
update_storm <- F
systems <- fread('input/SDWA_latest_downloads/SDWA_PUB_WATER_SYSTEMS.csv',na.strings = c('NA',""))
systems <- systems[grepl('^TX',systems$PWSID),]
systems <- systems[systems$PWS_ACTIVITY_CODE=='A'|mdy(systems$PWS_DEACTIVATION_DATE)>mdy('01/01/2000'),]
systems <- systems[PWS_TYPE_CODE=='CWS',]
cws_geog <- fread('input/SDWA_latest_downloads/SDWA_GEOGRAPHIC_AREAS.csv',na.strings = '-')
systems$COUNTY_SERVED <- cws_geog$COUNTY_SERVED[match(systems$PWSID,cws_geog$PWSID)]
######### collect PWS data ######
tx_counties <- tigris::counties(state = 'TX',class = 'sf',year= 2017)
dinfo_dt = fread('input/twdd_records/district_list_2019-03-08.csv',stringsAsFactors = F,na.strings = "")
dinfo_dt$PWS_ID[dinfo_dt$PWS_ID == "NA"] <- NA
dinfo_dt$District_ID = as.character(dinfo_dt$District_ID)
#dinfo_dt = dinfo_dt[!is.na(PWS_ID)]
setkey(dinfo_dt,District_ID)
dinfo_dt$PWS_ID = str_split(dinfo_dt$PWS_ID,'\\|')
dinfo_dt$District_Type = dinfo_dt$Type
dinfo_dt$District_Type[dinfo_dt$District_Type %in% c('WATER CONTROL AND IMPROVEMENT DISTR')] <- 'WCID'
dinfo_dt$District_Type[dinfo_dt$District_Type %in% c('MUNICIPAL UTILITY DISTRICT')] <- 'MUD'
dinfo_dt$District_Type[dinfo_dt$District_Type %in% c('FRESH WATER SUPPLY DISTRICT')] <- 'FWSD'
dinfo_dt$District_Type[dinfo_dt$District_Type %in% c('SPECIAL UTILITY DISTRICT')] <- 'SUD'
keep = c('SUD','FWSD','MUD','WCID')
dinfo_dt$District_Type[!dinfo_dt$District_Type %in% keep] <- 'Other'
dinfo_dt$`First Reported Date` = dmy(dinfo_dt$`First Reported Date`)
#dinfo_dt <- dinfo_dt[dinfo_dt$District_Type %in% keep,]
#dinfo_dt <- dinfo_dt[mdy(dinfo_dt$Created)<mdy('01/01/2006'),]
dinfo_dt <- dinfo_dt[is.na(dinfo_dt$Ended)|mdy(dinfo_dt$Ended)>mdy('01/01/2000'),]
dinfo_dt <- dinfo_dt[!grepl('MWA',dinfo_dt$District_Name),]
dinfo_dt <- dinfo_dt[District_Type!='Other',]
id_crosswalk<-rbindlist(mapply(function(x,y) data.table(District_ID = x,PWS_ID = y),x = dinfo_dt$District_ID,y = dinfo_dt$PWS_ID,SIMPLIFY = F))
saveRDS(id_crosswalk,'org_performance/output/id_crosswalk.RDS')
systems$District_ID <- id_crosswalk$District_ID[match(systems$PWSID,id_crosswalk$PWS_ID)]
systems$MASTER_ID <- ifelse(!is.na(systems$District_ID),systems$District_ID,systems$PWSID)
system_keep_vars <- c("PWSID","PWS_NAME","District_ID","MASTER_ID",
"PWS_DEACTIVATION_DATE","PRIMARY_SOURCE_CODE",
"IS_WHOLESALER_IND","SERVICE_CONNECTIONS_COUNT",
"FIRST_REPORTED_DATE", "COUNTY_SERVED")
systems$IS_WHOLESALER_IND <- (systems$IS_WHOLESALER_IND == 'Y') + 0
systems$PRIMARY_SOURCE_CODE <- grepl("GW",systems$PRIMARY_SOURCE_CODE) + 0
systems$PRIMARY_SOURCE_CODE[is.na(systems$PRIMARY_SOURCE_CODE)]<-1
systems <- systems[,system_keep_vars,with = F]
systems <- Reduce(merge,list(
systems[,min(FIRST_REPORTED_DATE),by=.(MASTER_ID)]%>% rename(FIRST_REPORTED_DATE = V1),
systems[,max(PWS_DEACTIVATION_DATE,na.rm = T),by=.(MASTER_ID)]%>% rename(PWS_DEACTIVATION_DATE = V1),
systems[,sum(SERVICE_CONNECTIONS_COUNT,na.rm = T),by=.(MASTER_ID)]%>% rename(SERVICE_CONNECTIONS_COUNT = V1),
systems[,max(IS_WHOLESALER_IND,na.rm = T),by=.(MASTER_ID)]%>% rename(IS_WHOLESALER_IND = V1),
systems[,max(PRIMARY_SOURCE_CODE,na.rm = T),by=.(MASTER_ID)] %>% rename(PRIMARY_SOURCE_CODE = V1),
systems[order(-SERVICE_CONNECTIONS_COUNT),.(MASTER_ID,COUNTY_SERVED,SERVICE_CONNECTIONS_COUNT)] %>%
filter(!duplicated(MASTER_ID)) %>% dplyr::select(MASTER_ID,COUNTY_SERVED)))
ids <- unique(unlist(dinfo_dt$PWS_ID))
#generate query using this tool: https://echo.epa.gov/tools/web-services/facility-search-drinking-water
#system_find <- 'https://echodata.epa.gov/echo/sdw_rest_services.get_systems?p_st=TX&p_act=A'
# res <- fromJSON(system_find)
# qid <- res$Results$QueryID
# return_systems <- fread(paste0('https://echodata.epa.gov/echo/sdw_rest_services.get_download?qid=',qid,'&qcolumns=6,9,10,11,14'))
# setnames(return_systems,'PWSId','PWS_ID')
# setnames(return_systems,'PWSName','PWS_NAME')
viols <- fread('input/SDWA_latest_downloads/SDWA_VIOLATIONS_ENFORCEMENT.csv',na.strings = c('NA',""))
viols <- viols[grepl('^TX',PWSID),]
viols$District_ID <- id_crosswalk$District_ID[match(viols$PWSID,id_crosswalk$PWS_ID)]
### identify unique viols where duplicated row is about different enforcement actions
viols$CALCULATED_RTC_DATE[is.na(viols$CALCULATED_RTC_DATE)]<-Sys.Date()
viols$start <- mdy(viols$NON_COMPL_PER_BEGIN_DATE)
viols$end <- mdy(viols$CALCULATED_RTC_DATE)
viols$MASTER_ID <- ifelse(!is.na(viols$District_ID),viols$District_ID,viols$PWSID)
viols$UQID <- paste(viols$PWSID,viols$VIOLATION_ID,sep = '_')
vmins <- viols[,list(min(start),max(end)),by=.(MASTER_ID,VIOLATION_ID,IS_HEALTH_BASED_IND)]
setnames(vmins,c('V1','V2'),c('start','end'))
weirds <- vmins[start>end,]
vmins2 <- vmins[start<end,]
##### COME BACK TO THIS DATAFRAME BELOW TO MAKE PLOT
vmins2$YEAR <- year(vmins2$start)
saveRDS(vmins2,'org_performance/output/individual_violation_durations.RDS')
temp_comb <- neatRanges::collapse_ranges(vmins2,start_var='start',end_var='end',max_gap = 1,
groups = c('MASTER_ID','IS_HEALTH_BASED_IND'))
temp <- neatRanges::partition_ranges(temp_comb,start_var='start',end_var='end',partition_by = 'year',
vars_to_keep = c('MASTER_ID','IS_HEALTH_BASED_IND'))
temp$YEAR <- year(temp$end)
temp$day_length <- temp$end-temp$start
violdays_by_year <- temp[,sum(day_length),by=.(MASTER_ID,IS_HEALTH_BASED_IND,YEAR)]
violdays_by_year$prop_of_year <- as.numeric(violdays_by_year$V1/365)
temp_comb2 <- neatRanges::collapse_ranges(vmins2,start_var='start',end_var='end',max_gap = 1,
groups = c('MASTER_ID'))
temp_allviols <- neatRanges::partition_ranges(temp_comb2,start_var='start',end_var='end',partition_by = 'year',
vars_to_keep = c('MASTER_ID'))
temp_allviols$YEAR <- year(temp_allviols$end)
temp_allviols$day_length <- temp_allviols$end-temp_allviols$start
allvioldays_by_year <- temp_allviols[,sum(day_length),by=.(MASTER_ID,YEAR)]
allvioldays_by_year$total_prop_of_year <- as.numeric(allvioldays_by_year$V1/365)
grd <- dcast(violdays_by_year,MASTER_ID+YEAR ~ IS_HEALTH_BASED_IND,value.var = 'prop_of_year')
setnames(grd,c('N','Y'),c('nonhealth_prop','health_prop'))
av <- allvioldays_by_year[,.(MASTER_ID,YEAR,total_prop_of_year)]
setnames(av,'total_prop_of_year','total_prop')
setkey(grd,MASTER_ID,YEAR)
setkey(av,MASTER_ID,YEAR)
grd <- av[grd,]
system_grid <- merge(systems,data.table(expand.grid(MASTER_ID = unique(systems$MASTER_ID),YEAR = year_spread[1]:year_spread[2])))
setkey(system_grid,MASTER_ID,YEAR)
setkey(grd,MASTER_ID,YEAR)
system_grid <- grd[system_grid,]
#system_grid$District_ID<-id_crosswalk$District_ID[match(system_grid$PWSID,id_crosswalk$PWS_ID)]
pws_dt <- system_grid
#system_grid[duplicated(paste(system_grid$MASTER_ID,system_grid$YEAR)),]
#### pws_dt still has non-districts in it, so make sure to filter those out
fig2 <- ggplot(vmins2[!grepl("TX",MASTER_ID)&YEAR>=2000,] %>%
mutate(IS_HEALTH_BASED_IND = ifelse(IS_HEALTH_BASED_IND=='N','Management violations','Health violations')),aes(x = as.factor(YEAR))) +
facet_wrap(~IS_HEALTH_BASED_IND,scales = 'fixed') + geom_bar(aes(fill = YEAR %in% 2009:2021)) + theme_bw() +
scale_y_continuous(name = '# new violations') +
scale_x_discrete(name = 'Reporting year',
breaks = seq(2001,2021,5)) +
scale_fill_manual(name = 'test',values = c('grey70','grey20'),
labels = c('autoregressive model only',
'autoregressive + district context models'))+
ggtitle('Total water district health and management violations') +
theme(text = element_text(family ='Times'),
legend.position = c(0.25,0.6),
legend.background = element_rect(fill = alpha('white',0.5)),
legend.title = element_blank())
